{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","weather","setWeather","temp","setTemp","city","setCity","inputCity","setInputCity","img","setimg","useEffect","axios","then","res","console","log","data","main","icon","catch","err","onSubmit","event","preventDefault","type","value","placeholder","onChange","target","className","name","src","alt","Math","floor","temp_max","temp_min","humidity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAyDeA,MAtDf,WAAoB,IAAD,EAEeC,mBAAS,IAFxB,mBAERC,EAFQ,KAECC,EAFD,OAGSF,mBAAS,IAHlB,mBAGRG,EAHQ,KAGFC,EAHE,OAISJ,mBAAS,UAJlB,mBAIRK,EAJQ,KAIFC,EAJE,OAKmBN,mBAAS,IAL5B,mBAKRO,EALQ,KAKGC,EALH,OAMOR,mBAAS,IANhB,mBAMRS,EANQ,KAMHC,EANG,KA8Bf,OApBAC,qBAAU,WACNC,IAAM,oDAAD,OAAqDP,EAArD,kBAHO,qCAIPQ,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZZ,EAAWY,EAAIG,MACfb,EAAQU,EAAIG,KAAKC,MACjBR,EAAO,oCAAD,OAAqCI,EAAIG,KAAKhB,QAAQ,GAAGkB,KAAzD,YAETC,OAAM,SAAAC,GACHN,QAAQC,IAAIK,QAErB,CAAChB,IAEJU,QAAQC,IAAIf,GAQR,gCACI,6CAEA,uBAAMqB,SATd,SAAqBC,GACjBA,EAAMC,iBACNlB,EAAQC,IAOJ,UACI,uBAAOkB,KAAK,OAAOC,MAAOnB,EAAWoB,YAAY,OAAOC,SAAU,SAAAL,GAAK,OAAIf,EAAae,EAAMM,OAAOH,UACrG,2CAKJ,sBAAKI,UAAU,eAAf,UACI,6BAAK7B,EAAQ8B,OACb,qBAAKC,IAAKvB,EAAKwB,IAAI,eAAeH,UAAU,WAC5C,wDAAoBI,KAAKC,MAAMhC,EAAKA,KAAO,QAA3C,aACA,gDAAY+B,KAAKC,MAAMhC,EAAKiC,SAAW,QAAvC,aACA,gDAAYF,KAAKC,MAAMhC,EAAKkC,SAAW,QAAvC,aACA,2CAAclC,EAAKmC,SAAnB,e,YCnCDC,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,OCESU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d4f060e.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, { useState , useEffect} from 'react'\r\n\r\nfunction Weather() {\r\n\r\n    const [weather, setWeather] = useState([])\r\n    const [temp, setTemp] = useState(\"\")\r\n    const [city, setCity] = useState(\"London\");\r\n    const [inputCity, setInputCity] = useState(\"\");\r\n    const [img, setimg] = useState(\"\");\r\n\r\n    const API_key = 'f061aab66815a4503a9fdca97508462a';\r\n\r\n    useEffect(() => {\r\n        axios(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`)\r\n            .then(res => {\r\n                console.log(res);\r\n                setWeather(res.data);\r\n                setTemp(res.data.main);\r\n                setimg(`http://openweathermap.org/img/wn/${res.data.weather[0].icon}.png`);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [city])\r\n\r\n    console.log(weather)\r\n\r\n    function handleClick(event){\r\n        event.preventDefault()\r\n        setCity(inputCity)\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <h1>Weather App</h1>\r\n            \r\n            <form onSubmit={handleClick}>\r\n                <input type=\"text\" value={inputCity} placeholder=\"City\" onChange={event => setInputCity(event.target.value)} />\r\n                <button>\r\n                    go\r\n                </button>\r\n            </form>\r\n            \r\n            <div className=\"weather-card\">\r\n                <h1>{weather.name}</h1>\r\n                <img src={img} alt=\"weather icon\" className=\"imgcss\" />\r\n                <h2>Temperature {`${Math.floor(temp.temp - 273.15)}° C`}</h2>\r\n                <h2>Max {`${Math.floor(temp.temp_max - 273.15)}° C`}</h2>\r\n                <h2>Min {`${Math.floor(temp.temp_min - 273.15)}° C`}</h2>\r\n                <h2>Humidity {temp.humidity} %</h2>            \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React from \"react\";\nimport './App.css';\nimport Weather from './components/Weather';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'weather-icons/css/weather-icons.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}